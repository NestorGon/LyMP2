using gold.**

var alf
var alfE

procedure main ( args : String [ ] ) begin
	var sc : java.util.Scanner ( System.$in )
	decoder := createDecoder ( )
	//deCoder:=createDecoder()

	//GAutomataFrame.show(coder)
	//GAutomataFrame.show(deCoder)
	//Utilities.testCodeDecode ( coder , decoder )
	Utilities.test(decoder)

end

function createDecoder ( ) : ITransducer begin
	alf := ( 'a' ‥ 'z' )
	alfE := ( 'A' ‥ 'Z' )
	E := alf ∪ alfE ∪ {'#'}
	A := alf ∪ { λ }
	B := ( 0 ‥ 2 ) × ( 0 ‥ 4 )
	C := (E × B) ∪ {⟨':',⟨0,0⟩⟩}
	D := A × A
	Q := D ∪ ( D × C ) ∪ { 'I' , "err" } ∪ ( '0' ‥ '4' )
	Σ := alf ∪ alfE ∪ { ':' , '#' } ∪ ( '0' ‥ '4' )
	Σ´ := alf ∪ { '$', ':' }
	q₀ := 'I'
	F := ( '0' ‥ '4' )

	return GDeterministicTransducer ( Q , Σ , Σ´ , q₀ , F , δ , g , h )
end

function δ ( A , n ) begin
	if A = 'I' and n ∉ alf then
		return "err"
	elseif A = 'I' then
		return ⟨ n , λ ⟩
	elseif A = "err" or A ∈ ( '0' ‥ '4' ) then
		return "err"
	end
end

function δ ( ⟨ A , B ⟩ , n ) begin
	if A = λ or (A ∉ alf and (A[0] = λ or A[1] = λ)) or ( B ∉ alf and |B| > 1 and (B[0] = λ or B[0] = '#')) then
		return "err"
	elseif A ∈ alf then
		if B ∈ alf and n = ':' then
			return ⟨ ⟨ A , B ⟩ , ⟨ ':' , ⟨ 0, 0 ⟩ ⟩ ⟩
		elseif B ∉ alf and n ∈ alf then
			return ⟨ A , n ⟩
		else
			return "err"
		end
	else
		a := ( B [ 1 ][ 0 ] + 1 ) % 3
		b := B [ 1 ][ 1 ]
		if n ∈ ( '0' ‥ '4' ) and B[0] = ':' then
			return "err"
		elseif n ∈ ( '0' ‥ '4' ) and ((n-'0') = b) then
			return n
		elseif n = ':' or (B[0] = ':' and n = '#') then
			return "err"
		elseif n ∉ A  then
			if n ∈ alfE and a = 1 then
				return ⟨ A , ⟨ previousToLower(n) , ⟨ a , b ⟩ ⟩ ⟩
			elseif n ∈ alfE and a = 2 then
				return ⟨ A , ⟨ toLower(n) , ⟨ a , b ⟩ ⟩ ⟩
			elseif (n ∈ alfE and a = 0) or n ∈ ( '0' ‥ '4' ) then
				return "err"
			elseif n = '#' and B[0] ∈ alfE then
				return "err"
			elseif n = '#' then
				return ⟨ A , ⟨ B[0] , ⟨ a , b ⟩ ⟩ ⟩
			else
				return ⟨ A , ⟨ n , ⟨ a , b ⟩ ⟩ ⟩
			end
		else
			return ⟨ A , ⟨ n , ⟨ a , ( b + 1 ) % 5 ⟩ ⟩ ⟩
		end
	end
end

function g(s) begin
	return λ
end

function h ( A , n ) begin
	if A = 'I' and n ∉ alf then
		return λ
	elseif A = 'I' then
		return n
	elseif A = "err" or A ∈ ( '0' ‥ '4' ) then
		return λ
	end
end

function h ( ⟨ A , B ⟩ , n ) begin
	if A = λ or (A ∉ alf and (A[0] = λ or A[1] = λ)) or ( B ∉ alf and |B| > 1 and (B[0] = λ or B[0] = '#')) then
		return λ
	elseif A ∈ alf then
		if B ∈ alf and n = ':' then
			return ':'
		elseif B ∉ alf and n ∈ alf then
			return n
		else
			return λ
		end
	else
		a := ( B [ 1 ][ 0 ] + 1 ) % 3
		b := B [ 1 ][ 1 ]
		if n ∈ ( '0' ‥ '4' ) and B[0] = ':' then
			return λ
		elseif n ∈ ( '0' ‥ '4' ) and ((n-'0') = b) then
			return '$'
		elseif n = ':' or (B[0] = ':' and n = '#') then
			return λ
		elseif n ∉ A  then
			if n ∈ alfE and a = 1 then
				return previousToLower(n)
			elseif n ∈ alfE and a = 2 then
				return toLower(n)
			elseif (n ∈ alfE and a = 0) or n ∈ ( '0' ‥ '4' ) then
				return λ
			elseif n = '#' and B[0] ∈ alfE then
				return λ
			elseif n = '#' then
				return B[0]
			else
				return n
			end
		elseif n = A[0] then
			return A[1]
		else
			return A[0]
		end
	end
end

function previousToLower( n ) begin
	var r : Character
	r := ((n-'A'-1)%26) +'a'
	return r
end

function toLower( n ) begin
	var r : Character
	r := (n-'A') +'a'
	return r
end
